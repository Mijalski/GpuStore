@page "/graphicsCards"
@attribute [Authorize(GpuStorePermissions.GraphicsCards.Default)]
@using Microsoft.AspNetCore.Authorization
@using Volo.Abp.Application.Dtos
@using Microsoft.Extensions.Localization
@using Mijalski.GpuStore.Business
@using Mijalski.GpuStore.Business.GraphicsCards
@using Mijalski.GpuStore.Localization
@using Mijalski.GpuStore.Permissions
@inject IStringLocalizer<GpuStoreResource> L
@inject AbpBlazorMessageLocalizerHelper<GpuStoreResource> LH
@inherits AbpCrudPageBase<IGraphicsCardAppService, Mijalski.GpuStore.Business.GraphicsCards.GraphicsCardDto, Guid, PagedAndSortedResultRequestDto, Mijalski.GpuStore.Business.GraphicsCards.CreateUpdateGraphicsCardDto>

<Card>
    <CardHeader>
        <Row Class="justify-content-between">
            <Column ColumnSize="ColumnSize.IsAuto">
                <h2>@L["GraphicsCards"]</h2>
            </Column>
            <Column ColumnSize="ColumnSize.IsAuto">
                @if (HasCreatePermission)
                {
                    <Button Color="Color.Primary"
                            Clicked="OpenCreateModalAsync">
                        @L["NewGraphicsCard"]
                    </Button>
                }
            </Column>
        </Row>
    </CardHeader>

    <CardBody>
        <DataGrid TItem="GraphicsCardDto"
                  Data="Entities"
                  ReadData="OnDataGridReadAsync"
                  TotalItems="TotalCount"
                  ShowPager="true"
                  PageSize="PageSize">
            <DataGridColumns>
                <DataGridColumn TItem="GraphicsCardDto"
                                Field="@nameof(GraphicsCardDto.Name)"
                                Caption="@L["Name"]"></DataGridColumn>
                <DataGridColumn TItem="GraphicsCardDto"
                                Field="@nameof(GraphicsCardDto.Manufacturer)"
                                Caption="@L["Manufacturer"]">
                    <DisplayTemplate>
                        @L[$"Enum:Manufacturer:{(int)context.Manufacturer}"]
                    </DisplayTemplate>
                </DataGridColumn>
                <DataGridColumn TItem="GraphicsCardDto"
                                Field="@nameof(GraphicsCardDto.ReleaseDate)"
                                Caption="@L["ReleaseDate"]">
                    <DisplayTemplate>
                        @context.ReleaseDate.ToShortDateString()
                    </DisplayTemplate>
                </DataGridColumn>
                <DataGridColumn TItem="GraphicsCardDto"
                                Field="@nameof(GraphicsCardDto.Price)"
                                Caption="@L["Price"]">
                    <DisplayTemplate>
                        @context.Price $
                    </DisplayTemplate>
                </DataGridColumn>
                <DataGridColumn TItem="GraphicsCardDto"
                                Field="@nameof(GraphicsCardDto.VendorName)"
                                Caption="@L["VendorName"]">
                </DataGridColumn>
                <DataGridColumn TItem="GraphicsCardDto"
                                Field="@nameof(GraphicsCardDto.RamSize)"
                                Caption="@L["RamSize"]">
                </DataGridColumn>
                <DataGridColumn TItem="GraphicsCardDto"
                                Field="@nameof(GraphicsCardDto.RamType)"
                                Caption="@L["RamType"]">
                </DataGridColumn>
                <DataGridColumn TItem="GraphicsCardDto"
                                Field="@nameof(GraphicsCardDto.DoesSupportRtx)"
                                Caption="@L["DoesSupportRtx"]">
                </DataGridColumn>
                <DataGridColumn TItem="GraphicsCardDto"
                                Field="@nameof(GraphicsCardDto.MemoryBus)"
                                Caption="@L["MemoryBus"]">
                </DataGridColumn>
                <DataGridColumn TItem="GraphicsCardDto"
                                Field="@nameof(GraphicsCardDto.CudaCoresCount)"
                                Caption="@L["CudaCoresCount"]">
                </DataGridColumn>
                <DataGridColumn TItem="GraphicsCardDto"
                                Field="@nameof(GraphicsCardDto.CreationTime)"
                                Caption="@L["CreationTime"]">
                    <DisplayTemplate>
                        @context.CreationTime.ToLongDateString()
                    </DisplayTemplate>
                </DataGridColumn>
                <DataGridEntityActionsColumn TItem="GraphicsCardDto" @ref="@EntityActionsColumn">
                    <DisplayTemplate>
                        <EntityActions TItem="GraphicsCardDto" EntityActionsColumn="@EntityActionsColumn">
                            <EntityAction TItem="GraphicsCardDto"
                                          Text="@L["Edit"]"
                                          RequiredPolicy="@UpdatePolicyName"
                                          Clicked="() => OpenEditModalAsync(context)" />
                            <EntityAction TItem="GraphicsCardDto"
                                          Text="@L["Delete"]"
                                          Clicked="() => DeleteEntityAsync(context)"
                                          RequiredPolicy="@DeletePolicyName"
                                          ConfirmationMessage="() => GetDeleteConfirmationMessage(context)" />

                        </EntityActions>
                    </DisplayTemplate>
                </DataGridEntityActionsColumn>

            </DataGridColumns>
        </DataGrid>
    </CardBody>
</Card>
<Modal @ref="@CreateModal">
    <ModalBackdrop />
    <ModalContent IsCentered="true">
        <Form>
            <ModalHeader>
                <ModalTitle>@L["NewGraphicsCard"]</ModalTitle>
                <CloseButton Clicked="CloseCreateModalAsync" />
            </ModalHeader>
            <ModalBody>
                <Validations @ref="@CreateValidationsRef" Model="@NewEntity" ValidateOnLoad="false">
                    <Validation MessageLocalizer="@LH.Localize">
                        <Field>
                            <FieldLabel>@L["Name"]</FieldLabel>
                            <TextEdit @bind-Text="@NewEntity.Name">
                                <Feedback>
                                    <ValidationError />
                                </Feedback>
                            </TextEdit>
                        </Field>
                    </Validation>
                    <Field>
                        <FieldLabel>@L["Type"]</FieldLabel>
                        <Select TValue="Manufacturer" @bind-SelectedValue="@NewEntity.Manufacturer">
                            @foreach (int graphicsCardManufacturerValue in Enum.GetValues(typeof(Manufacturer)))
                            {
                                <SelectItem TValue="Manufacturer" Value="@((Manufacturer) graphicsCardManufacturerValue)">
                                    @L[$"Enum:Manufacturer:{graphicsCardManufacturerValue}"]
                                </SelectItem>
                            }
                        </Select>
                    </Field>
                    <Field>
                        <FieldLabel>@L["ReleaseDate"]</FieldLabel>
                        <DateEdit TValue="DateTime" @bind-Date="NewEntity.ReleaseDate" />
                    </Field>
                    <Field>
                        <FieldLabel>@L["Price"]</FieldLabel>
                        <NumericEdit TValue="decimal" @bind-Value="NewEntity.Price" />
                    </Field>
                    <Field>
                        <FieldLabel>@L["VendorName"]</FieldLabel>
                        <TextEdit @bind-Text="NewEntity.VendorName" />
                    </Field>
                    <Field>
                        <FieldLabel>@L["RamSize"]</FieldLabel>
                        <TextEdit @bind-Text="NewEntity.RamSize" />
                    </Field>
                    <Field>
                        <FieldLabel>@L["RamType"]</FieldLabel>
                        <TextEdit @bind-Text="NewEntity.RamType" />
                    </Field>
                    <Field>
                        <FieldLabel>@L["MemoryBus"]</FieldLabel>
                        <TextEdit @bind-Text="NewEntity.MemoryBus" />
                    </Field>
                    <Field>
                        <FieldLabel>@L["CudaCoresCount"]</FieldLabel>
                        <NumericEdit TValue="int?" @bind-Value="NewEntity.CudaCoresCount" />
                    </Field>
                    <Field>
                        <FieldLabel>@L["DoesSupportRtx"]</FieldLabel>
                        <Check @bind-Checked="NewEntity.DoesSupportRtx" />
                    </Field>
                </Validations>
            </ModalBody>
            <ModalFooter>
                <Button Color="Color.Secondary"
                        Clicked="CloseCreateModalAsync">
                    @L["Cancel"]
                </Button>
                <Button Color="Color.Primary"
                        Type="@ButtonType.Submit"
                        PreventDefaultOnSubmit="true"
                        Clicked="CreateEntityAsync">
                    @L["Save"]
                </Button>
            </ModalFooter>
        </Form>
    </ModalContent>
</Modal>
<Modal @ref="@EditModal">
    <ModalBackdrop />
    <ModalContent IsCentered="true">
        <Form>
            <ModalHeader>
                <ModalTitle>@EditingEntity.Name</ModalTitle>
                <CloseButton Clicked="CloseEditModalAsync" />
            </ModalHeader>

            <ModalBody>
                <Validations @ref="@EditValidationsRef" Model="@NewEntity" ValidateOnLoad="false">
                    <Validation MessageLocalizer="@LH.Localize">
                        <Field>
                            <FieldLabel>@L["Name"]</FieldLabel>
                            <TextEdit @bind-Text="@EditingEntity.Name">
                                <Feedback>
                                    <ValidationError />
                                </Feedback>
                            </TextEdit>
                        </Field>
                    </Validation>
                    <Field>
                        <FieldLabel>@L["Type"]</FieldLabel>
                        <Select TValue="Manufacturer" @bind-SelectedValue="@EditingEntity.Manufacturer">
                            @foreach (int graphicsCardManufacturerValue in Enum.GetValues(typeof(Manufacturer)))
                            {
                                <SelectItem TValue="Manufacturer" Value="@((Manufacturer) graphicsCardManufacturerValue)">
                                    @L[$"Enum:Manufacturer:{graphicsCardManufacturerValue}"]
                                </SelectItem>
                            }
                        </Select>
                    </Field>
                    <Field>
                        <FieldLabel>@L["ReleaseDate"]</FieldLabel>
                        <DateEdit TValue="DateTime" @bind-Date="EditingEntity.ReleaseDate" />
                    </Field>
                    <Field>
                        <FieldLabel>@L["Price"]</FieldLabel>
                        <NumericEdit TValue="decimal" @bind-Value="EditingEntity.Price" />
                    </Field>
                    <Field>
                        <FieldLabel>@L["VendorName"]</FieldLabel>
                        <TextEdit @bind-Text="EditingEntity.VendorName" />
                    </Field>
                    <Field>
                        <FieldLabel>@L["RamSize"]</FieldLabel>
                        <TextEdit @bind-Text="EditingEntity.RamSize" />
                    </Field>
                    <Field>
                        <FieldLabel>@L["RamType"]</FieldLabel>
                        <TextEdit @bind-Text="EditingEntity.RamType" />
                    </Field>
                    <Field>
                        <FieldLabel>@L["MemoryBus"]</FieldLabel>
                        <TextEdit @bind-Text="EditingEntity.MemoryBus" />
                    </Field>
                    <Field>
                        <FieldLabel>@L["CudaCoresCount"]</FieldLabel>
                        <NumericEdit TValue="int?" @bind-Value="EditingEntity.CudaCoresCount" />
                    </Field>
                    <Field>
                        <FieldLabel>@L["DoesSupportRtx"]</FieldLabel>
                        <Check @bind-Checked="EditingEntity.DoesSupportRtx" />
                    </Field>
                </Validations>
            </ModalBody>
            <ModalFooter>
                <Button Color="Color.Secondary"
                        Clicked="CloseEditModalAsync">
                    @L["Cancel"]
                </Button>
                <Button Color="Color.Primary"
                        Type="@ButtonType.Submit"
                        PreventDefaultOnSubmit="true"
                        Clicked="UpdateEntityAsync">
                    @L["Save"]
                </Button>
            </ModalFooter>
        </Form>
    </ModalContent>
</Modal>

@code
{
    public GraphicsCards() // Constructor
    {
        CreatePolicyName = GpuStorePermissions.GraphicsCards.Create;
        UpdatePolicyName = GpuStorePermissions.GraphicsCards.Edit;
        DeletePolicyName = GpuStorePermissions.GraphicsCards.Delete;
    }
}